apply plugin: "com.android.application"
apply plugin: 'realm-android'

realm {
    syncEnabled = true;
}

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"


/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.photor"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        // 使用Cmake工具
        externalNativeBuild {
            cmake {
                // https://stackoverflow.com/questions/50677231/linking-errors-on-android-with-opencv-3-4-0-and-ndk
                // Recently, NDK switched to libc++ as default STL, but OpenCV is built with gnustl.
                // 上次更新NDK之后一堆报错，估计就是和设置下面的这个参数有关
//                 arguments  '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=gnustl_static'
                arguments '-DANDROID_STL=gnustl_static'
                //设置 C++ flag，可选配置，-frtti 表示项目支持RTTI；-fexceptions 表示当前项目支持C++异常处理
                cppFlags "-std=c++11", "-frtti", "-fexceptions"
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // 配置CMakeLists.txt路径
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"   // 设置所要编写的c源码位置，以及编译后so文件的名字
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    // sourceSets 放在android标签的最后才生效
    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/album',
                    'src/main/res/home',
                    'src/main/res/home/staralign',
                    'src/main/res/home/dof',
                    'src/main/res/home/exposure',
                    'src/main/res/home/scanner',
                    'src/main/res/camera',
                    'src/main/res/imageedit',
            ]
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    // From node_modules
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.facebook.react:react-native:+'
    // 实现图片圆形化的功能
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    // BottomNavigationView的扩展
    implementation 'com.github.ittianyu:BottomNavigationViewEx:1.2.4'
    // 消息小气泡的实现
    implementation 'q.rorbin:badgeview:1.1.0'
    // 引入 glide 库
    implementation('com.github.bumptech.glide:glide:4.8.0') {
        exclude group: "com.android.support"
    }
    implementation 'com.android.support:support-fragment:27.1.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    // 引入步骤控件
    implementation 'com.shuhart.stepview:stepview:1.2.5'
    // 引入日志
    implementation 'com.orhanobut:logger:1.15'
    // 引入camera view
    implementation 'com.otaliastudios:cameraview:1.6.0'
    implementation 'com.android.support:exifinterface:27.1.1'
    // 引入选择器
    implementation 'com.contrarywind:wheelview:4.0.8'
    // 引入选择器
    implementation 'com.shawnlin:number-picker:2.4.6'
    // 引入视频播放器
    implementation 'cn.jzvd:jiaozivideoplayer:6.3.1'
    // 引入富文本框信息
    implementation 'com.github.lygttpod:SuperTextView:2.1.8'
    implementation project(':photopicker')
    // 引入依赖android模块信息
    api project(':smartcameralib')
    api project(':smartcropperlib')
    api project(':imageeditlibrary')
    api project(':openCVLibrary341')
    // 引入rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'
    // This library allows the usage of RxJava with the new Android M permission model.
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    // 引入 android 图标信息
    //the core iconcis library (without any widgets)
    implementation 'com.mikepenz:iconics-core:2.8.4'
    //this adds all ui view widgets (IconicsButton, IconicsImageView, ...)
    implementation 'com.mikepenz:google-material-typeface:2.2.0.3.original@aar'
    implementation 'com.mikepenz:community-material-typeface:1.5.54.2@aar'
    implementation 'com.mikepenz:fontawesome-typeface:4.6.0.1@aar'
    implementation 'com.mikepenz:ionicons-typeface:2.0.1.5@aar'
    implementation 'org.jetbrains:annotations-java5:15.0'
    // android 控件注入
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    // 引入sketch imageview
    implementation (name:'sketch-2.6.1', ext:'aar')
    implementation (name:'sketch-gif-2.6.1', ext:'aar')
    // 引入启动页
    implementation 'cn.bingoogolapple:bga-banner:2.2.4@aar'
    implementation 'com.android.support:support-v4:27.1.1'
    // 引入浮动button
    implementation 'com.github.clans:fab:1.6.4'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
